// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Task_List.Server.Contexto;

#nullable disable

namespace Task_List.Server.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240729152925_AddAllTables")]
    partial class AddAllTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Task_List.Server.Models.Projeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Projetos", (string)null);
                });

            modelBuilder.Entity("Task_List.Server.Models.Recurso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TipoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TipoId");

                    b.ToTable("Recursos", (string)null);
                });

            modelBuilder.Entity("Task_List.Server.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Task_List.Server.Models.Tarefa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AntecessoraId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataPrevistaFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataPrevistaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataRealFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataRealInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DuracaoHoras")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AntecessoraId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tarefas", (string)null);
                });

            modelBuilder.Entity("Task_List.Server.Models.TarefaRecursos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RecursoId")
                        .HasColumnType("integer");

                    b.Property<int>("TarefaId")
                        .HasColumnType("integer");

                    b.Property<int?>("TarefaId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecursoId");

                    b.HasIndex("TarefaId");

                    b.HasIndex("TarefaId1");

                    b.ToTable("TarefaRecursos", (string)null);
                });

            modelBuilder.Entity("Task_List.Server.Models.Tipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Tipos", (string)null);
                });

            modelBuilder.Entity("Task_List.Server.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("Telefone")
                        .HasMaxLength(11)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Task_List.Server.Models.Projeto", b =>
                {
                    b.HasOne("Task_List.Server.Models.Status", "Status")
                        .WithMany("Projeto")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_List.Server.Models.Usuario", "Usuario")
                        .WithMany("Projetos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Task_List.Server.Models.Recurso", b =>
                {
                    b.HasOne("Task_List.Server.Models.Tipo", "Tipo")
                        .WithMany("Recursos")
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Task_List.Server.Models.Tarefa", b =>
                {
                    b.HasOne("Task_List.Server.Models.Tarefa", "Antecessora")
                        .WithMany()
                        .HasForeignKey("AntecessoraId");

                    b.HasOne("Task_List.Server.Models.Status", "Status")
                        .WithMany("Tarefa")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecessora");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_List.Server.Models.TarefaRecursos", b =>
                {
                    b.HasOne("Task_List.Server.Models.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_List.Server.Models.Tarefa", "Tarefa")
                        .WithMany()
                        .HasForeignKey("TarefaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_List.Server.Models.Tarefa", null)
                        .WithMany("TarefaRecursos")
                        .HasForeignKey("TarefaId1");

                    b.Navigation("Recurso");

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Task_List.Server.Models.Status", b =>
                {
                    b.Navigation("Projeto");

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Task_List.Server.Models.Tarefa", b =>
                {
                    b.Navigation("TarefaRecursos");
                });

            modelBuilder.Entity("Task_List.Server.Models.Tipo", b =>
                {
                    b.Navigation("Recursos");
                });

            modelBuilder.Entity("Task_List.Server.Models.Usuario", b =>
                {
                    b.Navigation("Projetos");
                });
#pragma warning restore 612, 618
        }
    }
}
